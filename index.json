[{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/5-conformancepack/5.2-validate-conformancepack-status/5.2.1-delegated-admin-account/","title":"Delegated Administrator Account","tags":[],"description":"","content":" Check AWS Lambda functions\nWe have 3 Lambda functions:\nCostOptimizationConfPack-GetOrgDetailsFunction contains logic to list member accounts, excluding the administrator account from the CloudFormation deployment targets\nCostOptimizationConfPack-ShareDocumentFunction contains logic to share the SSM Document created by the delegated administrator account, granting read access to member accounts\nCostOptimizationConformanceConfigRuleFunction defines the evaluation logic for the custom AWS Config rule\nCheck AWS Systems Manager Document:\nNavigate to the Systems Manager service page, then select \u0026ldquo;Documents\u0026rdquo; from the left navigation pane:\nSelect the \u0026ldquo;Owned by me\u0026rdquo; tab and verify that there is a document named CostOptimizationConfPack-EbsGp3Remediation\nSelect the document and view its content:\nThis document takes an EBS volume ID as input and modifies the corresponding EBS volume type to gp3\nAWS Config Aggregator is a resource type that centrally collects AWS Config configuration and compliance data from multiple sources (cross-account, cross-Region)\nCheck AWS Config Aggregator\n3.1 Access the AWS Config service\n3.2 In the left navigation pane, select Aggregator and then Conformance packs\nðŸ“Œ This is the dashboard that allows administrators to centrally monitor rules and compliance status of resources across accounts and the entire organization\n3.3 Depending on how many accounts are in your organization, you will have that many Conformance packs\n3.4 Check the rules included in the pack "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/5-conformancepack/5.1-deploy-conformancepack/","title":"Deploy Conformance Pack","tags":[],"description":"","content":"Overview We will use the Audit account to deploy resources in the solution using AWS CloudFormation, including:\nA CloudFormation StackSet: deploys a set of resources in bulk to multiple accounts A CloudFormation Stack: deploys supporting resources to help distribute the resources defined in the CloudFormation StackSet to the designated member accounts. Deployment Download the CloudFormation template here\nSign in to the AWS CloudFormation management console using the Audit account\nIn the main console, open CloudShell, select Actions then Upload file\nVerify the CloudFormation template has been successfully uploaded\nThen enter the following command to deploy the Conformance Pack:\naws cloudformation deploy --template-file AWS_Config_Cost_Optimization_Template.yaml --stack-name CostOptimizationConfPack --parameter-overrides DeployingInDelegatedAdminAccount=True --capabilities CAPABILITY_IAM After approximately 5â€“10 minutes, the deployment completes successfully "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/2-prerequiste/2.1-createorganization/","title":"Enable AWS Organizations","tags":[],"description":"","content":"\rTo begin, you need an AWS account that hasn\u0026rsquo;t joined AWS Organizations yet.\nEnable AWS Organizations (Console) In the AWS Management Console, in the top-left corner next to Services, click the search box, type \u0026ldquo;AWS Organizations\u0026rdquo;, and select the service.\nClick Create Organization. By default, the organization is created with all features enabled. The organization is created and the AWS Accounts page appears. The only account currently available is your management account, and it is now under the root organizational unit (OU).\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/3-establish-trusted-access/3.1-aws-config/","title":"Enable trusted access between AWS Organizations and AWS Config","tags":[],"description":"","content":"Overview This setup allows AWS Config to perform cross-account operations without requiring administrators to manually configure permission policies in each account.\nThe following steps include:\nenable the core AWS Config service integration enable multi-account deployment and aggregation features Steps to follow Sign in to the AWS Management Console as the management account and open AWS Config.\nOpen AWS CloudShell. Execute the following two commands:\naws organizations enable-aws-service-access --service-principal=config-multiaccountsetup.amazonaws.com aws organizations enable-aws-service-access --service-principal=config.amazonaws.com "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/1-introduce/","title":"Introduction","tags":[],"description":"","content":"Overview AWS Config is a service that continuously assesses, audits, and evaluates the configurations and relationships of AWS, on-premises, and multi-cloud resources. This guide shows how to enhance the value of AWS Config by deploying an organization-wide solution that automatically evaluates resources against cost optimization best practices using Conformance Packs.\nA Conformance Pack is a collection of AWS Config rules and remediation actions that provides a comprehensive compliance framework to codify and deploy security, operational, or cost optimization checks within a single account and region or across an entire AWS Organization. These rules automatically monitor and assess resources to detect compliance against each rule\u0026rsquo;s defined logic. AWS Config offers both Managed Rules (pre-built, customizable rules) and Custom Rules (allowing custom logic via AWS Lambda or AWS CloudFormation Guardâ€”a policy-as-code language).\nWhen a resource violates a rule\u0026rsquo;s logic, it is marked Noncompliant. You can choose to remediate manually or automate remediation using AWS Systems Manager Automationâ€”a central operations hub with built-in runbooks to automatically fix noncompliant resources or trigger event-driven workflows like alerting teams for action.\nSolution Overview This solution enables organizations already using AWS Config to maximize value by integrating automated cost optimization governance into their existing infrastructure. It provides three sample custom rules representing cost optimization best practices, continuously monitoring resource configurations and reporting compliance status to a centralized AWS Config Aggregator in the delegated administrator account for simplified monitoring and reporting.\nThe implementation includes the following governance rules:\nRule 1: Detect gp2 EBS volumes\nRemediation: Automatically convert to gp3 volumes Rule 2: Detect unattached EBS volumes Rule 3: Detect S3 buckets missing lifecycle policies When resources do not meet rule criteria, both the individual resource and the corresponding rule in the conformance pack are marked Noncompliant. Rule 1 integrates an on-demand or automated remediation by invoking an SSM Automation runbook to convert EBS gp2 volumes to gp3. This upgrade delivers independent IOPS and throughput without additional storage, yielding up to 20% cost savings per GB compared to gp2 volumes.\nImportant: AWS Config is a paid serviceâ€”review pricing documentation to understand organization-level cost implications before a broad deployment if Config is not already in use.\nThis solution supports deployment across AWS Organizations regardless of AWS Control Tower status. AWS Control Tower provides an organization and governance framework for multi-account environments with established best practices. Figure 1 illustrates deploying the Cost Optimization Conformance Pack on a sample OU structure in a Control Tower environment with member accounts. The Security OU holds the auditing account, designated as the delegated administrator for both AWS Config and AWS CloudFormation. This designation provides the necessary permissions to deploy the Cost Optimization Conformance Pack and related resources via CloudFormation StackSets across accounts in the organization. The CloudFormation stack includes the custom Cost Optimization Conformance Pack rules, Lambda functions, and SSM documents referenced by those rules. Two custom IAM roles are provided through the StackSet to allow Lambda and SSM document execution. All organization-wide components are deployed from the central auditing account, simplifying solution management.\nAWS Config evaluates resource compliance with conformance pack rules periodically or triggered by configuration changes. The AWS Config Aggregator in the auditing account consolidates and centralizes compliance data collected from member accounts, facilitating regional analysis and reporting.\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/4-delegate-admin-accounts/4.1-delegated-admin-account-for-aws-config/","title":"Register delegated administrator account for AWS Config","tags":[],"description":"","content":"Steps to follow Sign in to the AWS Management Console using the Audit account. You can verify the organization\u0026rsquo;s account structure in the Set up Landing Zone step.\nRun the following commands:\naws organizations register-delegated-administrator --account-id $ACCOUNT_ID --service-principal config-multiaccountsetup.amazonaws.com and\naws organizations register-delegated-administrator --account-id $ACCOUNT_ID --service-principal config.amazonaws.com To verify that the Audit account has been successfully registered as a delegated administrator for AWS Config, run the following commands:\naws organizations list-delegated-administrators --service-principal=config.amazonaws.com and\naws organizations list-delegated-administrators --service-principal=config-multiaccountsetup.amazonaws.com "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/","title":"Scaling Organizational Cost Control: Practical Deployment of AWS Config","tags":[],"description":"","content":"Scaling Organizational Cost Control: Practical Deployment of AWS Config Learn how to configure AWS Config rules, package them into a single unit â€” Conformance Packs. This enables you to deploy and manage hundreds of Config rules across your AWS Organization and ensure consistent compliance standards across all accounts and regions with a single action.\nIt also automates remediation workflows through Systems Manager, integrated with AWS Config Aggregator as the central hub for collecting and monitoring compliance data from all accounts in your organization.\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/5-conformancepack/5.2-validate-conformancepack-status/","title":"Check the Status of the Conformance Pack","tags":[],"description":"","content":"In this step, we will check how the resources defined in the above CloudFormation template are allocated.\nContents Check the Delegated Administrator Account Check the Member Accounts Conclusion "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/3-establish-trusted-access/3.2-aws-cloudformation/","title":"Enable trusted access between AWS Organizations and AWS CloudFormation","tags":[],"description":"","content":"Overview Enables CloudFormation StackSets to perform operations on member accounts without requiring individual permission configurations in each account.\nSteps to follow Sign in to the AWS Management Console as the management account and open AWS CloudFormation.\nOpen AWS CloudShell. Execute the following command:\naws organizations enable-aws-service-access --service-principal=member.org.stacksets.cloudformation.amazonaws.com "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/5-conformancepack/5.2-validate-conformancepack-status/5.2.2-member-accounts/","title":"Member Accounts","tags":[],"description":"","content":"Log in using a member account\nHere, for the sake of simplicity, we will use the Log Archive account\nCheck AWS Lambda function We have a single function that evaluates the AWS Config rule Check AWS Systems Manager Document: A document is shared to perform remediation if AWS Config detects a non-compliance event Check AWS Config Conformance Pack Select View to see details "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/2-prerequiste/","title":"Prerequisite Steps","tags":[],"description":"","content":"Contents To prepare the multi-account environment and automate the creation of resources and infrastructure (monitoring, compliance, etc.), we need to perform the following steps:\nEnable AWS Organizations Set up a Landing Zone (AWS Control Tower) Configure AWS Identity Center Activate trusted access for CloudFormation StackSets ðŸ’¡ AWS Organizations allows centralized multi-account management, AWS Control Tower Landing Zone automates the setup of related monitoring and security services following AWS best practices, and AWS Identity Center enables seamless account switching among member accounts.\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/4-delegate-admin-accounts/4.2-delegated-admin-account-for-aws-cloudformation/","title":"Register delegated administrator account for AWS CloudFormation","tags":[],"description":"","content":"Steps to follow Sign in to the AWS Management Console using the Audit account. You can verify the organization\u0026rsquo;s account structure in the Set up Landing Zone step.\nRun the following command:\naws organizations register-delegated-administrator --service-principal=member.org.stacksets.cloudformation.amazonaws.com --account-id=$ACCOUNT_ID To verify that the Audit account has been successfully registered as a delegated administrator for AWS CloudFormation, run the following command:\naws organizations list-delegated-administrators --service-principal=member.org.stacksets.cloudformation.amazonaws.com "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/2-prerequiste/2.2-createlandingzone/","title":"Set up Landing Zone","tags":[],"description":"","content":"Set up Landing Zone Access the AWS Control Tower Management Console (AWS Control Tower):\nSelect Set up landing zone.\nIt takes approximately 15 minutes for AWS Control Tower to complete the setup.\nOnce completed, Control Tower automatically creates two mandatory member accounts: the Audit account and the Log Archive account, and sets up the basic Organizational Units (OUs): Security OU (containing the Audit and Log Archive accounts), Sandbox OU (for testing), and Root OU (containing the management account).\nReview the Organizational Units (OUs) structure:\nNavigate to the \u0026ldquo;Organization\u0026rdquo; section in Control Tower.\nConfirm the creation of the following basic OUs:\nâ€¢ Security OU (containing the Audit and Log Archive accounts)\nâ€¢ Sandbox OU (for test environments)\nâ€¢ Root OU (containing the management account)\nVerify any additional OUs you configured.\nVerify the core accounts:\nIn the \u0026ldquo;Organization\u0026rdquo; section, verify the following accounts: â€¢ Management account (your root account) â€¢ Audit account â€¢ Log Archive account\nEnsure these accounts are assigned to the correct OUs.\nðŸ’¡ During the Landing Zone setup, AWS Control Tower automatically configures AWS Config for member accounts (recorders, delivery channels). For the Audit account, Control Tower deploys an AWS Config Aggregator, which provides centralized monitoring of compliance rules for resources across the organization.\nðŸ“Œ The diagram illustrates how AWS Control Tower automatically provisions and governs a multi-account environment with standardized governance, security, and account provisioning through the central management account.\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/5-conformancepack/5.2-validate-conformancepack-status/5.2.3-conclusion/","title":"Conclusion","tags":[],"description":"","content":"Thus, we have deployed a series of AWS Config Conformance Packs to the member accounts.\nThe conformance pack includes the following rules:\nCostOpt-S3-WithoutLifecycle: detects S3 buckets that are not configured with a lifecycle policy.\nCostOpt-Ebs-Gp3: identifies EBS volumes that are not using the gp3 volume type.\nCostOpt-Ebs-Unattached: identifies unattached EBS volumes (not attached to EC2 instances) that may incur unnecessary costs.\nThese are all custom rules with evaluation logic defined via Lambda functions. Among these three rules, we also implement a remediation action using the SSM Document CostOptimizationConfPack-EbsGp3Remediation to convert any EBS volume using gp2 to the cost-saving gp3 type.\nAll of the above resources are automated through the CloudFormation service.\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/3-establish-trusted-access/","title":"Establish Trusted Access in AWS Organizations","tags":[],"description":"","content":"In this step, we will create a trusted relationship between AWS Organizations and the service principals for AWS CloudFormation and AWS Config.\nThis setup enables:\nMulti-account capabilities â€“ Trusted access allows AWS services to operate across multiple accounts in your organization without manually configuring permissions in each account. Centralized management â€“ Services like AWS Config, CloudTrail, and Security Hub can be deployed and managed organization-wide from the management account. Service-linked roles â€“ Trusted access automatically creates the service-linked roles required in member accounts. Contents 3.1. Enable trusted access for AWS Config\n3.2. Enable trusted access for AWS CloudFormation\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/2-prerequiste/2.3-sso/","title":"Set up AWS Identity Center","tags":[],"description":"","content":"This service is optional for this workshop; however, to conveniently switch between the delegated administrator account and other member accounts, enabling AWS Identity Center is recommended.\nYou can refer to the detailed guide in the workshop Using AWS IAM Identity Center for robust identity management\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/3-establish-trusted-access/3.3-validate-trusted-access/","title":"Validate trusted access relationships","tags":[],"description":"","content":"Keep previous CloudShell session and verify the trusted relationships have been correctly established by running the following command:\naws organizations list-aws-service-access-for-organization The output should include the following values:\n{ \u0026#34;EnabledServicePrincipals\u0026#34;: [ { \u0026#34;ServicePrincipal\u0026#34;: \u0026#34;config-multiaccountsetup.amazonaws.com\u0026#34;, \u0026#34;DateEnabled\u0026#34;: \u0026#34;2025-05-24T16:14:01.992000+07:00\u0026#34; }, { \u0026#34;ServicePrincipal\u0026#34;: \u0026#34;config.amazonaws.com\u0026#34;, \u0026#34;DateEnabled\u0026#34;: \u0026#34;2025-05-24T16:15:21.780000+07:00\u0026#34; }, { \u0026#34;ServicePrincipal\u0026#34;: \u0026#34;member.org.stacksets.cloudformation.amazonaws.com\u0026#34;, \u0026#34;DateEnabled\u0026#34;: \u0026#34;2025-05-24T16:22:41.608000+07:00\u0026#34; } ] } "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/4-delegate-admin-accounts/","title":"Activate Delegated Administrator Accounts","tags":[],"description":"","content":"In this step, we designate a member account (not the management account) to perform specific administrative tasks for designated AWS services across your organization.\nThe management account should be used only for organizational management tasks.\nIn this section, we will create an S3 bucket and configure session log storage to capture the details of commands used in a session.\nWhy ? Separation of duties â€“ Administrative responsibilities can be distributed to specialized teams using dedicated member accounts. Reduced management account access â€“ Fewer individuals need access to the management account, improving security. Service specialization â€“ Service administrators can manage their respective services organization-wide. Operational efficiency â€“ Service administrators can work directly from their assigned accounts without switching to the management account. Compliance requirements â€“ Meets compliance needs that require separation of duties. Contents Register a delegated administrator for AWS Config Register a delegated administrator for AWS CloudFormation Create required IAM roles "},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/2-prerequiste/2.4-activatetrustedaccessforstacksets/","title":"Enable trusted access for CloudFormation StackSets","tags":[],"description":"","content":"Enable trusted access for CloudFormation StackSets with AWS Organizations Enabling this allows CloudFormation StackSets to deploy resources across multiple accounts. Follow these steps:\nSign in to the AWS Management Console for the CloudFormation service as the management account.\nFrom the navigation pane, choose StackSets. If trusted access is disabled, a banner prompts you to activate trusted access.\nChoose Activate trusted access. Trusted access is successfully activated when the following banner displays:\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/5-conformancepack/","title":"Deploy Cost-Optimized Conformance Pack","tags":[],"description":"","content":"Contents 5.1. Deploy Conformance Pack\n5.2. Check Conformance Pack Status\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/6-test/","title":"Solution Testing","tags":[],"description":"","content":"We will create an EBS volume with type gp2 to test the solution:\nSign in again using a member account.\nNavigate to the EC2 service.\nIn the left navigation pane, select Volumes.\nCreate a new volume with the following properties, making sure to choose the gp2 volume type.\nAfter creation succeeds, verify the volume state, then navigate to AWS Config.\nðŸ’¡ Note the EBS volume ID to correlate with the AWS Config Conformance Pack evaluation results.\nSelect the Conformance Pack named Cost-Optimization (or similar).\nClick View to see the list of rules.\nSince the newly created EBS volume is gp2 and unattached to any EC2 instance, two rules will be marked as noncompliant.\nClick the CostOpt-Ebs-Gp3 rule to open the rule dashboard.\nThe dashboard lists EBS volumes violating the gp3 requirement, showing the same ID as our new volume.\nTo remediate, click the Remediate button.\nWait a moment, then check the Status column as shown below:\nThe EBS volume will disappear from the dashboard once it becomes compliant.\nVerify the properties of the updated EBS volume:\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/7-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"We will perform the following steps to delete the resources we created in this exercise.\nClean up all resources created by CloudFormation Open the CloudFormation console (https://console.aws.amazon.com/cloudformation) using the delegated administrator account.\nIn AWS CloudShell, run: aws cloudformation delete-stack --stack-name CostOptimizationConfPack Wait until all stacks are deleted. Continue using the same CloudShell session to revoke delegated administrator permissions. Run the following commands:\naws organizations deregister-delegated-administrator --account-id $ACCOUNT_ID --service-principal config-multiaccountsetup.amazonaws.com aws organizations deregister-delegated-administrator --account-id 123412341234 --service-principal config.amazonaws.com Delete EBS volumes Open the EC2 console (https://console.aws.amazon.com/ec2) using a member account.\nDelete the EBS volume. Delete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hoangquochung1110.github.io/cost-optimization-at-scale/tags/","title":"Tags","tags":[],"description":"","content":""}]